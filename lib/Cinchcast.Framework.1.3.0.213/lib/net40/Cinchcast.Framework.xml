<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cinchcast.Framework</name>
    </assembly>
    <members>
        <member name="T:Cinchcast.Framework.CinchcastFrameworkException">
            <summary>
            An all purpose exception class for raising framework errors
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.CinchcastFrameworkException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CinchcastFrameworkException"/> class.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.CinchcastFrameworkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CinchcastFrameworkException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CinchcastFrameworkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CinchcastFrameworkException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Cinchcast.Framework.CinchcastFrameworkException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CinchcastFrameworkException"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Cinchcast.Framework.CinchcastFrameworkException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CinchcastFrameworkException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Cinchcast.Framework.CinchcastFrameworkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CinchcastFrameworkException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Cinchcast.Framework.CodeContracts.AssertionException">
            <summary>
                Exception raised when an assertion fails.
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.CodeContracts.CodeContractException">
            <summary>
            Exception raised when a contract is broken.
            Catch this exception type if you wish to differentiate between
            any DesignByContract exception and other runtime exceptions.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.CodeContractException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.CodeContractException"/> class.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.CodeContractException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.CodeContractException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.CodeContractException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.CodeContractException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.AssertionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.AssertionException"/> class.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.AssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.AssertionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.AssertionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.AssertionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Cinchcast.Framework.CodeContracts.Check">
            <summary>
               Design by Contract checks developed by http://www.codeproject.com/KB/cs/designbycontract.aspx.
               Each method generates an exception or
               a trace assertion statement if the contract is broken.
            </summary>
            <remarks>
               This example shows how to call the Require method.
               Assume DBC_CHECK_PRECONDITION is defined.
               <code>
                   public void Test(int x)
                   {
                   try
                   {
                   Check.Require(x > 1, "x must be > 1");
                   }
                   catch (System.Exception ex)
                   {
                   Console.WriteLine(ex.ToString());
                   }
                   }
               </code>
               If you wish to use trace assertion statements, intended for Debug scenarios,
               rather than exception handling then set 
               <code>Check.UseAssertions = true</code>
               You can specify this in your application entry point and maybe make it
               dependent on conditional compilation flags or configuration file settings, e.g.,
               <code>
                   #if DBC_USE_ASSERTIONS
                   Check.UseAssertions = true;
                   #endif
               </code>
               You can direct output to a Trace listener. For example, you could insert
               <code>
                   Trace.Listeners.Clear();
                   Trace.Listeners.Add(new TextWriterTraceListener(Console.Out));
               </code>
               or direct output to a file or the Event Log.
               (Note: For ASP.NET clients use the Listeners collection
               of the Debug, not the Trace, object and, for a Release build, only exception-handling
               is possible.)
            </remarks>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Assert(System.Boolean,System.String)">
            <summary>
            Assertion check.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <exception cref="T:Cinchcast.Framework.CodeContracts.AssertionException">When the assertion is not valid</exception>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Assert(System.Boolean,System.String,System.Exception)">
            <summary>
            Assertion check.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
            <exception cref="T:Cinchcast.Framework.CodeContracts.AssertionException">When the assertion is not valid</exception>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Assert``1(System.Boolean,System.String)">
            <summary>
            Assertion check.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Assert(System.Boolean)">
            <summary>
            Assertion check.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <exception cref="T:Cinchcast.Framework.CodeContracts.AssertionException">When the assertion is not valid</exception>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Ensure(System.Boolean,System.String)">
            <summary>
            Postcondition check.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Ensure(System.Boolean,System.String,System.Exception)">
            <summary>
            Postcondition check.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Ensure``1(System.Boolean,System.String)">
            <summary>
            Postcondition check.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Ensure(System.Boolean)">
            <summary>
            Postcondition check.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Invariant(System.Boolean,System.String)">
            <summary>
            Invariant check.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <exception cref="T:Cinchcast.Framework.CodeContracts.InvariantException">When the assertion is not valid</exception>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Invariant(System.Boolean,System.String,System.Exception)">
            <summary>
            Invariant check.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
            <exception cref="T:Cinchcast.Framework.CodeContracts.InvariantException">When the assertion is not valid</exception>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Invariant``1(System.Boolean,System.String)">
            <summary>
            Invariants the specified assertion.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Invariant(System.Boolean)">
            <summary>
            Invariant check.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <exception cref="T:Cinchcast.Framework.CodeContracts.InvariantException">When the assertion is not valid</exception>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Require(System.Boolean,System.String)">
            <summary>
            Precondition check - should run regardless of preprocessor directives.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Require(System.Boolean,System.String,System.Exception)">
            <summary>
            Precondition check - should run regardless of preprocessor directives.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Require``1(System.Boolean,System.String)">
            <summary>
            Requires the specified assertion.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.Check.Require(System.Boolean)">
            <summary>
            Precondition check - should run regardless of preprocessor directives.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
        </member>
        <member name="P:Cinchcast.Framework.CodeContracts.Check.UseAssertions">
            <summary>
                Gets or sets a value indicating whether you wish to use Trace Assert statements 
                instead of exception handling. 
                (The Check class uses exception handling by default.)
            </summary>
        </member>
        <member name="P:Cinchcast.Framework.CodeContracts.Check.UseExceptions">
            <summary>
            Gets a value indicating whether exception handling is being used
            </summary>
            <value>
              <c>true</c> if [use exceptions]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.CodeContracts.PreconditionException">
            <summary>
            Exception raised when an invariant fails.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.PreconditionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.PreconditionException"/> class.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.PreconditionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.PreconditionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.PreconditionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.PreconditionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Cinchcast.Framework.CodeContracts.PostconditionException">
            <summary>
            Exception raised when an invariant fails.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.PostconditionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.PostconditionException"/> class.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.PostconditionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.PostconditionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.PostconditionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.PostconditionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Cinchcast.Framework.CodeContracts.InvariantException">
            <summary>
            Exception raised when an invariant fails.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.InvariantException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.InvariantException"/> class.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.InvariantException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.InvariantException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cinchcast.Framework.CodeContracts.InvariantException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.CodeContracts.InvariantException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Cinchcast.Framework.Collections.IPartitioningStrategy`1">
            <summary>
            Defines the contract for a partition strategy
            </summary>
            <typeparam name="T">The type of element for the input / output enumerations</typeparam>
        </member>
        <member name="M:Cinchcast.Framework.Collections.IPartitioningStrategy`1.GetPartitions(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the partitions created from the source enumeration.
            </summary>
            <param name="source">The source enumeration.</param>
            <returns>An array of partitions represented each on by an enumeration itself.</returns>
        </member>
        <member name="T:Cinchcast.Framework.Collections.MaxElementsPerPartitionStrategy`1">
            <summary>
            A partition strategy where the source list is partition in a way
            where the output partitions contains at most maxElementsPerPartition 
            specified in the contructor
            </summary>
            <typeparam name="T">The type of the element form the source enumeration</typeparam>
        </member>
        <member name="M:Cinchcast.Framework.Collections.MaxElementsPerPartitionStrategy`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.Collections.MaxElementsPerPartitionStrategy`1"/> class.
            </summary>
            <param name="maxElementsPerPartition">The max elements per partition.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when the maxElementsPerPartition is lower than 0</exception>
        </member>
        <member name="M:Cinchcast.Framework.Collections.MaxElementsPerPartitionStrategy`1.GetPartitions(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the partitions created from the source enumeration.
            </summary>
            <param name="source">The source enumeration.</param>
            <returns>
            An array of partitions represented each on by an enumeration itself.
            </returns>
            <exception cref="T:System.ArgumentNullException">Throws when the source argument is null</exception>
        </member>
        <member name="T:Cinchcast.Framework.Collections.MaxPartitionsStrategy`1">
            <summary>
            A partition strategy where the source list is partition in a way
            where the output partitions ammounts is not bigger than the maxPartitions parameters
            </summary>
            <typeparam name="T">The type of the element form the source enumeration</typeparam>
        </member>
        <member name="M:Cinchcast.Framework.Collections.MaxPartitionsStrategy`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.Collections.MaxPartitionsStrategy`1"/> class.
            </summary>
            <param name="maxPartitions">The max partitions.</param>
        </member>
        <member name="M:Cinchcast.Framework.Collections.MaxPartitionsStrategy`1.GetPartitions(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the partitions created from the source enumeration.
            </summary>
            <param name="source">The source enumeration.</param>
            <returns>
            An array of partitions represented each on by an enumeration itself.
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.Collections.PagedList`1">
            <summary>
            Represents a list of paged elements
            </summary>
            <typeparam name="T">The type of the element</typeparam>
        </member>
        <member name="M:Cinchcast.Framework.Collections.PagedList`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.Collections.PagedList`1"/> class.
            </summary>
            <param name="totalItems">The total items.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Cinchcast.Framework.Collections.PagedList`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:Cinchcast.Framework.Collections.PagedList`1.TotalItems">
            <summary>
            Gets the total items.
            </summary>
            <value>The total items.</value>
        </member>
        <member name="T:Cinchcast.Framework.Collections.Partitioner`1">
            <summary>
            Splits an input IEnumerable of T into several IEnumerables of T according to a specified
            ammout of elements per enumeration
            </summary>
            <typeparam name="T">The type of the element</typeparam>
        </member>
        <member name="M:Cinchcast.Framework.Collections.Partitioner`1.#ctor(System.Collections.Generic.IEnumerable{`0},Cinchcast.Framework.Collections.IPartitioningStrategy{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.Collections.Partitioner`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="partitioningStrategy">The partitioning strategy.</param>
        </member>
        <member name="M:Cinchcast.Framework.Collections.Partitioner`1.#ctor(System.Collections.Generic.IEnumerable{`0},Cinchcast.Framework.Collections.IPartitioningStrategy{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.Collections.Partitioner`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="partitioningStrategy">The partitioning strategy.</param>
            <param name="randomize">if set to <c>true</c> [randomize] the source elements.</param>
        </member>
        <member name="M:Cinchcast.Framework.Collections.Partitioner`1.GetPartitions">
            <summary>
            Gets the partitions created from the source enumeration.
            </summary>
            <returns>A IEnumerable of IEnumerable of T contaning the partitioned list of elements</returns>
        </member>
        <member name="T:Cinchcast.Framework.Commands.Command">
            <summary>
            Provides a unit of execution to perform a business logic related action with validation support
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Commands.Command.ValidationResults">
            <summary>
            Get the validation results.
            </summary>
            <returns>A IEnumerable of ValidationResult</returns>
        </member>
        <member name="M:Cinchcast.Framework.Commands.Command.Execute">
            <summary>
            Executes the command.
            </summary>
            <exception cref="T:Cinchcast.Framework.Commands.CommandValidationException">Throws an exception if the command is not valid with all the command validation error message</exception>
        </member>
        <member name="M:Cinchcast.Framework.Commands.Command.TryExecute">
            <summary>
            Exe the execute.
            </summary>
            <returns><c>true</c> is the command is valid; otherwise <c>false</c></returns>
        </member>
        <member name="M:Cinchcast.Framework.Commands.Command.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns>True is the instance is valid, othwerwise false.</returns>
        </member>
        <member name="M:Cinchcast.Framework.Commands.Command.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified object is valid.
            </summary>
            <param name="validationContext">The validation context.</param>
            <returns>
            A collection that holds failed-validation information.
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Commands.Command.OnExecute">
            <summary>
            Override this method to perform all the logic for the command execution
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Commands.Command.AddValidationResult(System.String,System.String[])">
            <summary>
            Adds the validation result.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="memberNames">The member names.</param>
        </member>
        <member name="M:Cinchcast.Framework.Commands.Command.AddValidationResult(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Adds the validation result.
            </summary>
            <param name="validationResult">The validation result.</param>
        </member>
        <member name="M:Cinchcast.Framework.Commands.Command.AddValidationResults(System.ComponentModel.DataAnnotations.ValidationResult[])">
            <summary>
            Adds the validation results.
            </summary>
            <param name="validationResults">The validation results.</param>
        </member>
        <member name="P:Cinchcast.Framework.Commands.Command.Executed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cinchcast.Framework.Commands.Command"/> was executed.
            </summary>
            <value>
              <c>true</c> if executed; otherwise, <c>false</c>.
            </value>
            <remarks>If a command is not valid this value should be false</remarks>
        </member>
        <member name="P:Cinchcast.Framework.Commands.Command.IsValid">
            <summary>
            Gets a value indicating whether the command is valid.
            </summary>
            <value>
              <c>true</c> if the command is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.Commands.Command`1">
            <summary>
            Supports a generic return value for the command
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="P:Cinchcast.Framework.Commands.Command`1.Result">
            <summary>
            Gets or sets the command result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.Commands.CommandProcessor">
            <summary>
            Base class for all command processors
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.Commands.ICommandProcessor">
            <summary>
            Provides the contract for executing commands
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Commands.ICommandProcessor.Process(Cinchcast.Framework.Commands.Command)">
            <summary>
            Processes the specified command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Cinchcast.Framework.Commands.ICommandProcessor.BatchProcess(System.Collections.Generic.IEnumerable{Cinchcast.Framework.Commands.Command},System.Boolean)">
            <summary>
            Processes the specified command batch
            </summary>
            <param name="commands">The commands.</param>
            <param name="stopOnInvalidCommand">Stops processing after a command is found to be invalid</param>
        </member>
        <member name="M:Cinchcast.Framework.Commands.ICommandProcessor.Process``1(Cinchcast.Framework.Commands.Command{``0})">
            <summary>
            Processes the specified generic command.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="command">The command.</param>
            <returns>The command output</returns>
        </member>
        <member name="M:Cinchcast.Framework.Commands.ICommandProcessor.BatchProcess``1(System.Collections.Generic.IEnumerable{Cinchcast.Framework.Commands.Command{``0}},System.Boolean)">
            <summary>
            Processes the specified command batch
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="commands">The commands.</param>
            <param name="stopOnInvalidCommand">Stops processing after a command is found to be invalid</param>
            <returns>
            The command outputs
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Commands.CommandProcessor.Process(Cinchcast.Framework.Commands.Command)">
            <summary>
            Processes the specified command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Cinchcast.Framework.Commands.CommandProcessor.Process``1(Cinchcast.Framework.Commands.Command{``0})">
            <summary>
            Processes the specified generic command.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="command">The command.</param>
            <returns>
            The command output
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Commands.CommandProcessor.BatchProcess(System.Collections.Generic.IEnumerable{Cinchcast.Framework.Commands.Command},System.Boolean)">
            <summary>
            Processes the specified command batch
            </summary>
            <param name="commands">The commands.</param>
            <param name="stopOnInvalidCommand">Stops processing after a command is found to be invalid</param>
        </member>
        <member name="M:Cinchcast.Framework.Commands.CommandProcessor.BatchProcess``1(System.Collections.Generic.IEnumerable{Cinchcast.Framework.Commands.Command{``0}},System.Boolean)">
            <summary>
            Processes the specified command batch
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="commands">The commands.</param>
            <param name="stopOnInvalidCommand">Stops processing after a command is found to be invalid</param>
            <returns>
            The command outputs
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.Commands.CommandValidationException">
            <summary>
            Used when validating commands
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Commands.CommandValidationException.#ctor(Cinchcast.Framework.Commands.Command)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.Commands.CommandValidationException"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:Cinchcast.Framework.Configuration.Settings">
            <summary>
            AppSettings helper methods to ease settings use
            </summary>
            <summary>
            AppSettings helper methods to ease settings use
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Configuration.Settings.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.Configuration.Settings"/> class.
            </summary>
            <param name="baseSettings">The base settings.</param>
        </member>
        <member name="M:Cinchcast.Framework.Configuration.Settings.Get``1(System.String)">
            <summary>
            Gets the specified setting by its key.
            </summary>
            <typeparam name="T">The type of the output value</typeparam>
            <param name="key">The key.</param>
            <returns>The configuration setting value or the type's default value in case the setting does not exist or has an invalid value</returns>
        </member>
        <member name="M:Cinchcast.Framework.Configuration.Settings.Get``1(System.String,``0)">
            <summary>
            Gets the specified setting by its key.
            </summary>
            <typeparam name="T">The type of the output value</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value in case the key does not exist or its of an invalid type.</param>
            <returns>The configuration setting value or the defaultValue in case the setting does not exist or has an invalid value</returns>
        </member>
        <member name="M:Cinchcast.Framework.Configuration.Settings.Get``1(System.String,System.Func{``0})">
            <summary>
            Gets the specified setting by its key.
            </summary>
            <typeparam name="T">The type of the output value</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value function in case the key does not exist or its of an invalid type.</param>
            <returns>The configuration setting value or the defaultValue in case the setting does not exist or has an invalid value</returns>
        </member>
        <member name="M:Cinchcast.Framework.Configuration.Settings.Get``1(System.String,System.Func{System.String,``0})">
            <summary>
            Gets the specified setting by its key.
            </summary>
            <typeparam name="T">The type of the output value</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value func to get the value from the setting.</param>
            <returns>
            The configuration setting value or the defaultValue in case the setting does not exist or has an invalid value
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Configuration.Settings.Get``1(System.String,System.Func{System.String,``0},System.Func{``0})">
            <summary>
            Gets the specified setting by its key.
            </summary>
            <typeparam name="T">The type of the output value</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value func to get the value from the setting.</param>
            <param name="defaultValue">The default value function in case the key does not exist or its of an invalid type.</param>
            <returns>
            The configuration setting value or the defaultValue in case the setting does not exist or has an invalid value
            </returns>
            <exception cref="T:System.ArgumentNullException">Throws when value or defaultValue are null</exception>
        </member>
        <member name="M:Cinchcast.Framework.Configuration.Settings.Get(System.Type,System.String)">
            <summary>
            Gets the specified setting by its key.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <returns>
            The configuration setting value or the type's default value in case the setting does not exist or has an invalid value
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Configuration.Settings.Get(System.Type,System.String,System.Object)">
            <summary>
            Gets the specified setting by its key.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value in case the key does not exist or its of an invalid type.</param>
            <returns>
            The configuration setting value or the defaultValue in case the setting does not exist or has an invalid value
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Configuration.Settings.Get(System.Type,System.String,System.Func{System.Object})">
            <summary>
            Gets the specified setting by its key.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value function in case the key does not exist or its of an invalid type.</param>
            <returns>
            The configuration setting value or the defaultValue in case the setting does not exist or has an invalid value
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Configuration.Settings.Get(System.Type,System.String,System.Func{System.String,System.Object})">
            <summary>
            Gets the specified setting by its key.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <param name="value">The value func to get the value from the setting.</param>
            <returns>
            The configuration setting value or the defaultValue in case the setting does not exist or has an invalid value
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Configuration.Settings.Get(System.Type,System.String,System.Func{System.String,System.Object},System.Func{System.Object})">
            <summary>
            Gets the specified setting by its key.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key.</param>
            <param name="value">The value func to get the value from the setting.</param>
            <param name="defaultValue">The default value function in case the key does not exist or its of an invalid type.</param>
            <returns>
            The configuration setting value or the defaultValue in case the setting does not exist or has an invalid value
            </returns>
            <exception cref="T:System.ArgumentNullException">Throws when value or defaultValue are null</exception>
        </member>
        <member name="P:Cinchcast.Framework.Configuration.Settings.AppSettings">
            <summary>
            Gets the Application Configuration Settings taken from appSettings config section
            </summary>
        </member>
        <member name="P:Cinchcast.Framework.Configuration.Settings.All">
            <summary>
            Gets all settings.
            </summary>
            <value>
            All settings.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.CompareAttribute">
            <summary>
            The base class for all compare attributes
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.CompareAttribute.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.CompareAttribute"/> class.
            </summary>
            <param name="compareTo">The value to compare against.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.CompareAttribute.FormatErrorMessage(System.String)">
            <summary>
            Applies formatting to an error message, based on the data field where the error occurred.
            </summary>
            <param name="name">The name to include in the formatted message.</param>
            <returns>
            An instance of the formatted error message.
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.CompareAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>
            true if the specified value is valid; otherwise, false.
            </returns>
        </member>
        <member name="P:Cinchcast.Framework.DataAnnotations.CompareAttribute.CompareTo">
            <summary>
            Gets the value to compare against
            </summary>
            <value>
            The value to compare against
            </value>
        </member>
        <member name="P:Cinchcast.Framework.DataAnnotations.CompareAttribute.CompareResults">
            <summary>
            Gets the compare results.
            </summary>
            <value>
            The compare results. It should be an array containing -1, 0 or 1
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.CompositeValidationResult">
            <summary>
            A composite validation result that contains multiple validation results
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.CompositeValidationResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.CompositeValidationResult"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.CompositeValidationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.CompositeValidationResult"/> class.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="memberNames">The list of member names that have validation errors.</param>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.CompositeValidationResult.#ctor(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.CompositeValidationResult"/> class.
            </summary>
            <param name="validationResult">The validation result object.</param>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.CompositeValidationResult.AddResult(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Adds the result.
            </summary>
            <param name="validationResult">The validation result.</param>
        </member>
        <member name="P:Cinchcast.Framework.DataAnnotations.CompositeValidationResult.Results">
            <summary>
            Gets the results.
            </summary>
            <value>
            The results.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.DateTimeCompareType">
            <summary>
            The type of validation that should be performed
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.DataAnnotations.DateTimeCompareType.Property">
            <summary>
            Against another property
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.DataAnnotations.DateTimeCompareType.Today">
            <summary>
            Against the value of DateTime.Today
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.DataAnnotations.DateTimeCompareType.Yesterday">
            <summary>
            Against the value of DateTime.Today.AddDays(-1) 
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.DataAnnotations.DateTimeCompareType.Tomorrow">
            <summary>
            Against the value of DateTime.Today.AddDays(1) 
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.DataAnnotations.DateTimeCompareType.Now">
            <summary>
            Against the value of DateTime.Today
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.DataAnnotations.DateTimeCompareType.Min">
            <summary>
            Against the value of DateTime.MinValue
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.DataAnnotations.DateTimeCompareType.Max">
            <summary>
            Against the value of DateTime.MaxValue
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.DateTimeCompareResult">
            <summary>
            The type of comparisson for the validation
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.DataAnnotations.DateTimeCompareResult.Greater">
            <summary>
            Expect to be greater than 
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.DataAnnotations.DateTimeCompareResult.Equal">
            <summary>
            Expect to be equal
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.DataAnnotations.DateTimeCompareResult.Lower">
            <summary>
            Expect to be lower than
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.DateTimeCompareAttribute">
            <summary>
            Performs specific DateTime comparissons
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.DateTimeCompareAttribute.#ctor(Cinchcast.Framework.DataAnnotations.DateTimeCompareType,Cinchcast.Framework.DataAnnotations.DateTimeCompareResult[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.DateTimeCompareAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="expectedCompareValue">The expected compare value.</param>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.DateTimeCompareAttribute.#ctor(System.String,Cinchcast.Framework.DataAnnotations.DateTimeCompareResult[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.DateTimeCompareAttribute"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="expectedCompareValue">The expected compare value.</param>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.DateTimeCompareAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class.
            </returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
            When comparing dates using DateTimeCompareType.Property the constructor that includes the propertyName should be used
            or
            The property with name:  + _propertyName +  does not exist in the type  + validationContext.ObjectType
            or
            The property with name:  + _propertyName +  must be a DateTime type, currently is a  + property.PropertyType
            </exception>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.EqualsAttribute">
            <summary>
            Performs an Equals comparisson against the target value
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.EqualsAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.EqualsAttribute"/> class.
            </summary>
            <param name="compareTo">The compare to.</param>
        </member>
        <member name="P:Cinchcast.Framework.DataAnnotations.EqualsAttribute.CompareResults">
            <summary>
            Gets the compare results.
            </summary>
            <value>
            The compare results. It should be an array containing -1, 0 or 1
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.GreaterEqualsThanAttribute">
            <summary>
            Performs a greater or equals comparison against the target value
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.GreaterEqualsThanAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.GreaterEqualsThanAttribute"/> class.
            </summary>
            <param name="compareTo">The compare to.</param>
        </member>
        <member name="P:Cinchcast.Framework.DataAnnotations.GreaterEqualsThanAttribute.CompareResults">
            <summary>
            Gets the compare results.
            </summary>
            <value>
            The compare results. It should be an array containing -1, 0 or 1
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.GreaterThanAttribute">
            <summary>
            Performs a greater than comparison against the target value
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.GreaterThanAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.GreaterThanAttribute"/> class.
            </summary>
            <param name="compareTo">The compare to.</param>
        </member>
        <member name="P:Cinchcast.Framework.DataAnnotations.GreaterThanAttribute.CompareResults">
            <summary>
            Gets the compare results.
            </summary>
            <value>
            The compare results. It should be an array containing -1, 0 or 1
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.LowerEqualsThanAttribute">
            <summary>
            Performs a lower or equals comparison against the target value
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.LowerEqualsThanAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.LowerEqualsThanAttribute"/> class.
            </summary>
            <param name="compareTo">The compare to.</param>
        </member>
        <member name="P:Cinchcast.Framework.DataAnnotations.LowerEqualsThanAttribute.CompareResults">
            <summary>
            Gets the compare results.
            </summary>
            <value>
            The compare results. It should be an array containing -1, 0 or 1
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.LowerThanAttribute">
            <summary>
            Performs a lower than comparison against the target value
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.LowerThanAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.LowerThanAttribute"/> class.
            </summary>
            <param name="compareTo">The compare to.</param>
        </member>
        <member name="P:Cinchcast.Framework.DataAnnotations.LowerThanAttribute.CompareResults">
            <summary>
            Gets the compare results.
            </summary>
            <value>
            The compare results. It should be an array containing -1, 0 or 1
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.NotEqualsAttribute">
            <summary>
            Performs an equals comparison against the target value
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.NotEqualsAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DataAnnotations.NotEqualsAttribute"/> class.
            </summary>
            <param name="compareTo">The compare to.</param>
        </member>
        <member name="P:Cinchcast.Framework.DataAnnotations.NotEqualsAttribute.CompareResults">
            <summary>
            Gets the compare results.
            </summary>
            <value>
            The compare results. It should be an array containing -1, 0 or 1
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DataAnnotations.ValidateObjectAttribute">
            <summary>
            Performs inner validation of the object
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DataAnnotations.ValidateObjectAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class.
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.Dynamic.StaticDynamicBridge">
            <summary>
            Allows creating dynamic instances of static classes
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Dynamic.StaticDynamicBridge.#ctor(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.Dynamic.StaticDynamicBridge"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="caseInsensitiveMatching">Perform case insensitive matching of fields, properties and method names</param>
            <param name="includeNonPublicMembers">Inlclude private and protected members</param>
        </member>
        <member name="M:Cinchcast.Framework.Dynamic.StaticDynamicBridge.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method 
            to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic 
            operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, 
            where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". 
            The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. 
            (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Dynamic.StaticDynamicBridge.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to 
            specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. 
            The binder.Name property provides the name of the member to which the value is being assigned. 
            For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, 
            binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class 
            derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. 
            (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Dynamic.StaticDynamicBridge.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method 
            to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed.
             For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, 
            binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. 
            (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="T:System.Text.StringBuilderExtensions">
            <summary>
            <see cref="T:System.Text.StringBuilder"/> extension methods
            </summary>
        </member>
        <member name="M:System.Text.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Appends the format and after that a new line.
            </summary>
            <param name="builder">The builder.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Exception class extension methods
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.ToErrorMessage(System.Exception,System.Boolean)">
            <summary>
            Returns a human readable nicely formatted error message from the exception containing all the inner exceptions.
            </summary>
            <param name="exception">The exception.</param>
            <param name="useBrInsteadOfNewLine">if set to <c>true</c> [use br instead of new line].</param>
            <returns>
            The error message
            </returns>
        </member>
        <member name="T:System.ObjectExtensions">
            <summary>
            Object exensions
            </summary>
        </member>
        <member name="M:System.ObjectExtensions.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the method.
            </summary>
            <param name="target">The obj.</param>
            <param name="methodName">Name of the method.</param>
            <param name="methodArgs">The method args.</param>
            <returns>The method return value</returns>
        </member>
        <member name="M:System.ObjectExtensions.ToDictionary``1(System.Object)">
            <summary>
            Creates a dictionary bases on object properties.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source.</param>
            <returns>A dictionary with object properties</returns>
        </member>
        <member name="M:System.ObjectExtensions.ToDictionary(System.Object)">
            <summary>
            Creates a dictionary bases on object properties.
            </summary>
            <param name="source">The source.</param>
            <returns>A dictionary with object properties</returns>
        </member>
        <member name="M:System.ObjectExtensions.ToSingleItemEnumerable``1(``0)">
            <summary>
            Creates an Enumerable containing this item as it's only memeber.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="objectToTranslateToEnumerable">The object to translate to enumerable.</param>
            <returns>An IEnumarable of T with one element</returns>
        </member>
        <member name="M:System.ObjectExtensions.ToSingleItemList``1(``0)">
            <summary>
            Creates a List containing this item as it's only memeber.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="objectToTranslateToList">The object to translate to a list.</param>
            <returns>An IList of T with one element</returns>
        </member>
        <member name="M:System.ObjectExtensions.ToSingleItemArray``1(``0)">
            <summary>
            Creates an Array containing this item as it's only memeber.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="objectToTranslateToArray">The object to translate to an array.</param>
            <returns>An array of T with one element</returns>
        </member>
        <member name="T:System.RoundTime">
            <summary>
            This class is used to round the time to X minutes.
            For example, 1:06:05 would be rounded to 1:00:00 if the rounding factor were 15 mins,
            and 1:16:05 would be rounded to 1:15:00.
            </summary>
        </member>
        <member name="M:System.RoundTime.Round(System.TimeSpan,System.TimeSpan,System.MidpointRounding)">
            <summary>
            Rounds the specified time.
            </summary>
            <param name="time">The time.</param>
            <param name="roundingInterval">The rounding interval.</param>
            <param name="roundingType">Type of the rounding.</param>
            <returns>A rounded TimeSpan</returns>
        </member>
        <member name="M:System.RoundTime.Round(System.TimeSpan,System.TimeSpan)">
            <summary>
            Rounds the specified time.
            </summary>
            <param name="time">The time.</param>
            <param name="roundingInterval">The rounding interval.</param>
            <returns>A rounded TimeSpan</returns>
        </member>
        <member name="M:System.RoundTime.Round(System.DateTime,System.TimeSpan)">
            <summary>
            Rounds the specified datetime.
            </summary>
            <param name="datetime">The datetime.</param>
            <param name="roundingInterval">The rounding interval.</param>
            <returns>A rounded DateTime</returns>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            <see cref="T:System.Type"/> extension methods
            </summary>
        </member>
        <member name="M:System.TypeExtensions.IsOfType``1(System.Type)">
            <summary>
            Determines whether [is of type] [the specified the type].
            </summary>
            <typeparam name="T">The type to check</typeparam>
            <param name="theType">The type.</param>
            <returns>
              <c>true</c> if [is of type] [the specified the type]; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">If theType is null</exception>
        </member>
        <member name="M:System.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether the specified the type is nullable.
            </summary>
            <param name="theType">The type.</param>
            <returns>
              <c>true</c> if the specified the type is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.TypeExtensions.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for the type.
            </summary>
            <param name="theType">The type.</param>
            <returns>The type's default value</returns>
        </member>
        <member name="M:System.TypeExtensions.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invokes the type's static method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="methodArgs">The method args.</param>
            <returns>The method return value</returns>
        </member>
        <member name="T:Cinchcast.Framework.HashHelper">
            <summary>
            Allows generation of proper unique hash codes
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.HashHelper.GetHashCode``2(``0,``1)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.HashHelper.GetHashCode``3(``0,``1,``2)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.HashHelper.GetHashCode``4(``0,``1,``2,``3)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="arg4">The arg4.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.HashHelper.GetHashCode``1(``0[])">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <typeparam name="T">The type of the arguments</typeparam>
            <param name="list">The list.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.HashHelper.GetHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <typeparam name="T">The type of the enumeration</typeparam>
            <param name="list">The list.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.HashHelper.GetHashCode(System.Object[])">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="list">The list.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.HashHelper.GetHashCodeForOrderNoMatterCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a hashcode for a collection for that the order of items
            does not matter.
            So {1, 2, 3} and {3, 2, 1} will get same hash code.
            </summary>
            <typeparam name="T">The type of the enumeration</typeparam>
            <param name="list">The list.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.HashHelper.CombineHashCode``1(System.Int32,``0)">
            <summary>
            Alternative way to get a hashcode is to use a fluent
            interface like this:<br />
            return 0.CombineHashCode(field1).CombineHashCode(field2).
            CombineHashCode(field3);
            </summary>
            <typeparam name="T">The type of the instance</typeparam>
            <param name="hashCode">The hash code.</param>
            <param name="arg">The arg.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.IO.FileWiper">
            <summary>
            Wipes files in a NIST 8088-compliant manner
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.IO.IFileWiper">
            <summary>
            interface defining the file wiper. Wipes files in a NIST 8088-compliant manner
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.IO.IFileWiper.WipeFile(System.String,System.Int32)">
            <summary>see the link
            http://www.codeproject.com/Articles/22736/Securely-Delete-a-File-using-NET
            </summary>
            <param name="filename">include full path to file</param>
            <param name="timesToWrite">the number of times to overwrite the file with garbage</param>
        </member>
        <member name="M:Cinchcast.Framework.IO.FileWiper.WipeFile(System.String,System.Int32)">
            <summary>see the link
            http://www.codeproject.com/Articles/22736/Securely-Delete-a-File-using-NET
            </summary>
            <param name="filename">include full path to file</param>
            <param name="timesToWrite">the number of times to overwrite the file with garbage</param>
        </member>
        <member name="E:Cinchcast.Framework.IO.FileWiper.PassInfoEvent">
            <summary>
            event for pass info
            </summary>
        </member>
        <member name="E:Cinchcast.Framework.IO.FileWiper.SectorInfoEvent">
            <summary>
            event for sector info
            </summary>
        </member>
        <member name="E:Cinchcast.Framework.IO.FileWiper.WipeDoneEvent">
            <summary>
            event for wipe done
            </summary>
        </member>
        <member name="E:Cinchcast.Framework.IO.FileWiper.WipeErrorEvent">
            <summary>
            event for wipe error
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.IO.WipeDoneEventArgs">
            <summary>
            the wipe done event args class
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.IO.WipeErrorEventArgs">
            <summary>
            the wipe error event args class
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.IO.WipeErrorEventArgs._exception">
            <summary>
            the exception
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.IO.WipeErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the WipeErrorEventArgs class
            </summary>
            <param name="error">the exception</param>
        </member>
        <member name="P:Cinchcast.Framework.IO.WipeErrorEventArgs.WipeError">
            <summary>
            Gets the exception
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.IO.WiperPassInfoEventArgs">
            <summary>
            the PassInfoEventArgs class
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.IO.WiperPassInfoEventArgs._currentPass">
            <summary>
            current pass
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.IO.WiperPassInfoEventArgs._totalPass">
            <summary>
            the total passes to make
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.IO.WiperPassInfoEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the WiperPassInfoEventArgs class.
            </summary>
            <param name="currentPass">the current pass</param>
            <param name="totalPasses">the total number of passes to make</param>
        </member>
        <member name="P:Cinchcast.Framework.IO.WiperPassInfoEventArgs.CurrentPass">
            <summary> Gets the current pass </summary>
        </member>
        <member name="P:Cinchcast.Framework.IO.WiperPassInfoEventArgs.TotalPasses">
            <summary> Gets the total number of passes to be run </summary> 
        </member>
        <member name="T:Cinchcast.Framework.IO.WiperSectorInfoEventArgs">
            <summary>
            the sector info args class
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.IO.WiperSectorInfoEventArgs._currentSector">
            <summary>
            current sector
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.IO.WiperSectorInfoEventArgs._totalSectors">
            <summary>
            total sectors
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.IO.WiperSectorInfoEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the WiperSectorInfoEventArgs class.
            </summary>
            <param name="currentSector">current sector</param>
            <param name="totalSectors">total sector.</param>
        </member>
        <member name="P:Cinchcast.Framework.IO.WiperSectorInfoEventArgs.CurrentSector">
            <summary> Gets the current sector </summary> 
        </member>
        <member name="P:Cinchcast.Framework.IO.WiperSectorInfoEventArgs.TotalSectors">
            <summary> Gets the total number of sectors to be run </summary> 
        </member>
        <member name="T:Cinchcast.Framework.Providers.Configuration.IProvidersSettings">
            <summary>
            Defines the contract for a providers settings class
            </summary>
        </member>
        <member name="P:Cinchcast.Framework.Providers.Configuration.IProvidersSettings.DefaultProvider">
            <summary>
            Gets the default provider.
            </summary>
            <value>
            The default provider.
            </value>
        </member>
        <member name="P:Cinchcast.Framework.Providers.Configuration.IProvidersSettings.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>
            The providers.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.Providers.Configuration.ProviderElement">
            <summary>
            The providers configuration element
            </summary>
        </member>
        <member name="P:Cinchcast.Framework.Providers.Configuration.ProviderElement.Name">
            <summary>
            Gets or sets the name or the provider.
            </summary>
            <value>
            The name.
            </value>
            <remarks>This property is the key and is required</remarks>
        </member>
        <member name="P:Cinchcast.Framework.Providers.Configuration.ProviderElement.TypeName">
            <summary>
            Gets or sets the typeName of the provider.
            </summary>
            <value>
            The typeName.
            </value>
            <remarks>This property is required</remarks>
        </member>
        <member name="P:Cinchcast.Framework.Providers.Configuration.ProviderElement.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.Providers.Configuration.ProviderSectionHandler">
            <summary>
            The provider configuration section handler
            </summary>
        </member>
        <member name="P:Cinchcast.Framework.Providers.Configuration.ProviderSectionHandler.DefaultProvider">
            <summary>
            Gets the default provider.
            </summary>
            <value>
            The default provider.
            </value>
        </member>
        <member name="P:Cinchcast.Framework.Providers.Configuration.ProviderSectionHandler.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>
            The providers.
            </value>
            <remarks>This property is required</remarks>
        </member>
        <member name="T:Cinchcast.Framework.Providers.Configuration.ProvidersCollection">
            <summary>
            The providers element configuration
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Providers.Configuration.ProvidersCollection.IndexOf(Cinchcast.Framework.Providers.Configuration.ProviderElement)">
            <summary>
            Returns the index of the provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns>The index of the provider</returns>
        </member>
        <member name="M:Cinchcast.Framework.Providers.Configuration.ProvidersCollection.Add(Cinchcast.Framework.Providers.Configuration.ProviderElement)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Cinchcast.Framework.Providers.Configuration.ProvidersCollection.Remove(Cinchcast.Framework.Providers.Configuration.ProviderElement)">
            <summary>
            Removes the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Cinchcast.Framework.Providers.Configuration.ProvidersCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the provider at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Cinchcast.Framework.Providers.Configuration.ProvidersCollection.Remove(System.String)">
            <summary>
            Removes the provider with the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Cinchcast.Framework.Providers.Configuration.ProvidersCollection.Clear">
            <summary>
            Removes all providers.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Providers.Configuration.ProvidersCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Providers.Configuration.ProvidersCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Providers.Configuration.ProvidersCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a configuration element to the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to add.</param>
        </member>
        <member name="P:Cinchcast.Framework.Providers.Configuration.ProvidersCollection.Item(System.Int32)">
            <summary>
            Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <param name="index">The index.</param>
            <returns>The configured provider</returns>
        </member>
        <member name="P:Cinchcast.Framework.Providers.Configuration.ProvidersCollection.Item(System.String)">
            <summary>
            Gets or sets a property, attribute, or child element of this configuration element.
            </summary>
            <param name="name">The name.</param>
            <returns>The configured provider</returns>
        </member>
        <member name="T:Cinchcast.Framework.Providers.IProviderSupportSettings">
            <summary>
            Defines the contract that a provider must implement in order to indicated that it support settings
            </summary>
        </member>
        <member name="P:Cinchcast.Framework.Providers.IProviderSupportSettings.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.Providers.ProviderFactory`1">
            <summary>
            Base class to support the provider pattern
            </summary>
            <typeparam name="TProvider">The type of the provider.</typeparam>
        </member>
        <member name="M:Cinchcast.Framework.Providers.ProviderFactory`1.GetProvider(System.String)">
            <summary>
            Gets the provider by its name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of TProvider</returns>
            <exception cref="T:System.Exception">Throws if the provider was not found</exception>
        </member>
        <member name="M:Cinchcast.Framework.Providers.ProviderFactory`1.GetDefaultProvider">
            <summary>
            Gets the default provider.
            </summary>
            <returns>The default configured provider</returns>
            <exception cref="T:System.Exception">Throws if there are no configured providers</exception>
        </member>
        <member name="M:Cinchcast.Framework.Providers.ProviderFactory`1.GetProviders">
            <summary>
            Gets the providers.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> with all the configured providers</returns>
        </member>
        <member name="M:Cinchcast.Framework.Providers.ProviderFactory`1.GetProviderNames">
            <summary>
            Gets the provider names.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> with all the configured provider names</returns>
        </member>
        <member name="M:Cinchcast.Framework.Providers.ProviderFactory`1.OnProviderInitialized(Cinchcast.Framework.Providers.Configuration.ProviderElement,`0)">
            <summary>
            Called when the provider has been initialized.
            </summary>
            <param name="providerElement">The provider element.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Cinchcast.Framework.Providers.ProviderFactory`1.InitializeProvidersWithoutConfiguration">
            <summary>
            Initializes the providers when no configuration is found in the application configuration file.
            </summary>
            <returns>A list of providers</returns>
        </member>
        <member name="P:Cinchcast.Framework.Providers.ProviderFactory`1.ConfigurationSectionName">
            <summary>
            Gets the name of the configuration section.
            </summary>
            <value>
            The name of the configuration section.
            </value>
        </member>
        <member name="P:Cinchcast.Framework.Providers.ProviderFactory`1.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="P:Cinchcast.Framework.Providers.ProviderFactory`1.ConfiguredProviders">
            <summary>
            Gets the configured providers.
            </summary>
            <value>
            The configured providers.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.BasePropertyHandler">
            <summary>
            Base Property Handler for getters and setters
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.BasePropertyHandler.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.Reflection.BasePropertyHandler"/> class.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="P:Cinchcast.Framework.Reflection.BasePropertyHandler.Property">
            <summary>
            Gets the property.
            </summary>
            <value>
            The property.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.FactoryMethod">
            <summary>
            Represents a method that creates instances of a type.
            </summary>
            <param name="arguments">A collection of arguments to pass to the constructor.</param>
            <returns>An instance of the associated type.</returns>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.Getter">
            <summary>
            Represents a method that gets the value stored in a field or property on
            the specified object.
            </summary>
            <param name="target">The object to get the value from.</param>
            <returns>The value stored in the associated field or property.</returns>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.Setter">
            <summary>
            Represents a method that sets the value stored in a field or property on
            the specified object.
            </summary>
            <param name="target">The object to get the value from.</param>
            <param name="value">The value to store in the associated field or property.</param>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.Invoker">
            <summary>
            Represents a method that calls another method.
            </summary>
            <param name="target">The object on which to call the associated method.</param>
            <param name="arguments">A collection of arguments to pass to the associated method.</param>
            <returns>The return value of the method.</returns>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.DynamicMethodFactory">
            <summary>
            A helper class that uses lightweight code generation to create dynamic methods.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.DynamicMethodFactory.CreateInvoker(System.Reflection.MethodInfo)">
            <summary>
            Creates a new <see cref="T:Cinchcast.Framework.Reflection.Invoker"/> that calls the specified method in a
            late-bound manner.
            </summary>
            <param name="method">The method that the invoker should call.</param>
            <returns>A dynamic invoker that can call the specified method.</returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.DynamicMethodFactory.CreateFactoryMethod(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new <see cref="T:Cinchcast.Framework.Reflection.FactoryMethod"/> that calls the specified constructor in a
            late-bound manner.
            </summary>
            <param name="constructor">The constructor that the factory method should call.</param>
            <returns>A dynamic factory method that can call the specified constructor.</returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.DynamicMethodFactory.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a new <see cref="T:Cinchcast.Framework.Reflection.Getter"/> that gets the value of the specified field in a
            late-bound manner.
            </summary>
            <param name="field">The field that the getter should read from.</param>
            <returns>A dynamic getter that can read from the specified field.</returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.DynamicMethodFactory.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new <see cref="T:Cinchcast.Framework.Reflection.Getter"/> that gets the value of the specified property in a
            late-bound manner.
            </summary>
            <param name="property">The property that the getter should read from.</param>
            <returns>A dynamic getter that can read from the specified property.</returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.DynamicMethodFactory.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a new <see cref="T:Cinchcast.Framework.Reflection.Setter"/> that sets the value of the specified field in a
            late-bound manner.
            </summary>
            <param name="field">The field that the setter should write to.</param>
            <returns>A dynamic setter that can write to the specified field.</returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.DynamicMethodFactory.CreateSetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new <see cref="T:Cinchcast.Framework.Reflection.Setter"/> that sets the value of the specified property in a
            late-bound manner.
            </summary>
            <param name="property">The property that the setter should write to.</param>
            <returns>A dynamic setter that can write to the specified property.</returns>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.LambdaActivator">
            <summary>
            Allows to create new instances of a specified type using a compiled Lambda expression
            http://bloggingabout.net/blogs/vagif/archive/2010/04/02/don-t-use-activator-createinstance-or-constructorinfo-invoke-use-compiled-lambda-expressions.aspx
            http://rogeralsing.com/2008/02/28/linq-expressions-creating-objects/
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.LambdaActivator.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="args">The constructor arguments.</param>
            <returns>A new instance of the specified type</returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.LambdaActivator.CreateInstance``1(System.Object[])">
            <summary>
            Creates a new instance of the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="args">The constructor arguments.</param>
            <returns>
            A new instance of the specified type
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.LambdaActivator.GetActivator(System.Type)">
            <summary>
            Gets the activator for a specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>An object activator for the specified type.</returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.LambdaActivator.GetActivator(System.Reflection.ConstructorInfo)">
            <summary>
            Gets the activator for a specified constructor info.
            </summary>
            <param name="ctor">The constructor.</param>
            <returns>
            An object activator for the specified type.
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.LambdaActivator.GetActivator``1">
            <summary>
            Gets the activator for a specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>
            An object activator for the specified type.
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.LambdaActivator.GetActivator``1(System.Reflection.ConstructorInfo)">
            <summary>
            Gets the activator for a specified constructor info.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="ctor">The constructor.</param>
            <returns>
            An object activator for the specified type.
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.LambdaActivator.ObjectActivator">
            <summary>
            A delegate to create an instance of a type
            </summary>
            <param name="args">The constructor args.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.LambdaActivator.ObjectActivator`1">
            <summary>
            A delegate to create an instance of a type
            </summary>
            <typeparam name="T">The type to create.</typeparam>
            <param name="args">The constructor args.</param>
            <returns>
            A new instance.
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.MemberInfoUtils">
            <summary>
            Provides helper methods to perform reflection actions on methods
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.MemberInfoUtils.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the member info based on a lambda expression.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="expression">The expression (x =&gt; x.Member).</param>
            <returns>
            The MemberInfo for the expression
            </returns>
            <exception cref="T:Cinchcast.Framework.CinchcastFrameworkException">If expression is null or expression is not a member access</exception>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.MemberInfoUtils.GetPropertyNameAndValue``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the property name and value.
            </summary>
            <typeparam name="T">The target type</typeparam>
            <param name="expression">The expression.</param>
            <returns>
            The property name and value
            </returns>
            <exception cref="T:Cinchcast.Framework.CinchcastFrameworkException">If expression is null or expression is not a member access</exception>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.MemberInfoUtils.GetPropertyName(System.Reflection.MemberInfo)">
            <summary>
            Gets the name of the property.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns>The property name</returns>
            <exception cref="T:System.ArgumentException">memberInfo should be a property accessor</exception>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.PropertyNameAndValue">
            <summary>
            Property Name and Value structure
            </summary>
        </member>
        <member name="P:Cinchcast.Framework.Reflection.PropertyNameAndValue.PropertyInfo">
            <summary>
            Gets or sets the property info.
            </summary>
            <value>
            The property info.
            </value>
        </member>
        <member name="P:Cinchcast.Framework.Reflection.PropertyNameAndValue.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Cinchcast.Framework.Reflection.PropertyNameAndValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.Reflection.ServiceLocatorActivator">
            <summary>
            An activator that create instances using ServiceLocator if enabled and falls back to LambdaActivator if the
            service locator is not enabled or the type was not registered within the container.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.ServiceLocatorActivator.CreateInstance(System.Type,System.Boolean)">
            <summary>
            Creates a new instance of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="fallbackToNormalActivator">if set to <c>true</c> [fallback to normal activator].</param>
            <returns>
            The created instance.
            </returns>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">
            ServiceLocator is not defined
            or
            The type  + type +  could not be created using LambdaActivator
            </exception>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.ServiceLocatorActivator.CreateInstance(System.Type,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="fallbackToNormalActivator">if set to <c>true</c> [fallback to normal activator].</param>
            <returns>
            The created instance.
            </returns>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">
            ServiceLocator is not defined
            or
            The type  + type +  could not be created using LambdaActivator
            </exception>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.ServiceLocatorActivator.CreateInstance``1(System.Boolean)">
            <summary>
            Creates a new instance of the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="fallbackToNormalActivator">if set to <c>true</c> [fallback to normal activator].</param>
            <returns>
            The created instance.
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.ServiceLocatorActivator.CreateInstance``1(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="name">The name.</param>
            <param name="fallbackToNormalActivator">if set to <c>true</c> [fallback to normal activator].</param>
            <returns>
            The created instance.
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Reflection.ServiceLocatorActivator.IsServiceLocatorDefined">
            <summary>
            Determines whether the ServiceLocator.Current is defined.
            </summary>
            <returns>
              <c>true</c> if the ServiceLocator.Current is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.Repl.CommandReceivedEventArgs">
            <summary>
            Repl receiver arguments
            </summary>
        </member>
        <member name="P:Cinchcast.Framework.Repl.CommandReceivedEventArgs.Response">
            <summary>
            Gets or sets the response
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.Repl.CommandLineInterfaceSocket">
            <summary>
            This creates a socket interpeter for various commands also known as a REPL (Read-Eval-Print-Loop)
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Repl.CommandLineInterfaceSocket.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.Repl.CommandLineInterfaceSocket"/> class.
            </summary>
            <param name="port">The port to listen on</param>
        </member>
        <member name="M:Cinchcast.Framework.Repl.CommandLineInterfaceSocket.Service">
            <summary>
            The service that handles each incoming socket thread.
            </summary>
        </member>
        <member name="E:Cinchcast.Framework.Repl.CommandLineInterfaceSocket.CommandReceived">
            <summary>
            Handles the events for a command received.
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.Serialization.Configuration.SerializationSectionHandler">
            <summary>
            Serialization configuration section handler
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.Serialization.Configuration.SerializationSectionHandler.SECTION_NAME">
            <summary>
            The serialization section name
            </summary>
        </member>
        <member name="P:Cinchcast.Framework.Serialization.Configuration.SerializationSectionHandler.Section">
            <summary>
            Gets the section.
            </summary>
            <value>
            The section.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.Serialization.ISerializer">
            <summary>
            Defines the contract for a serliazer
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.ISerializer.Serialize(System.Type,System.Object,System.IO.Stream)">
            <summary>
            Serializes the specified value.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.ISerializer.Serialize``1(``0,System.IO.Stream)">
            <summary>
            Serializes the specified value.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.ISerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the specified source.
            </summary>
            <typeparam name="T">The type of the object to deserialize</typeparam>
            <param name="source">The source.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.ISerializer.Deserialize(System.Type,System.IO.Stream)">
            <summary>
            Deserializes the specified type.
            </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="source">The source.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="T:Cinchcast.Framework.Serialization.ISerializerFactory">
            <summary>
            Defines the contract for a serialization factory
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.ISerializerFactory.GetDefaultSerializer">
            <summary>
            Gets the default serializer.
            </summary>
            <returns>The default serializer</returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.ISerializerFactory.GetSerializer(Cinchcast.Framework.Serialization.SerializerType)">
            <summary>
            Gets the serializer.
            </summary>
            <param name="type">The type of the serializer.</param>
            <returns>The configured serializer by its type</returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.ISerializerFactory.GetSerializers">
            <summary>
            Gets all serializers.
            </summary>
            <returns>All the configured serializers</returns>
        </member>
        <member name="T:Cinchcast.Framework.Serialization.Providers.DotNetXmlSerializer">
            <summary>
            The System.Xml.Serialization.XmlSerializer implementation
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.DotNetXmlSerializer.Serialize(System.Type,System.Object,System.IO.Stream)">
            <summary>
            Serializes the specified value.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.DotNetXmlSerializer.Serialize``1(``0,System.IO.Stream)">
            <summary>
            Serializes the specified value.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.DotNetXmlSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the specified source.
            </summary>
            <typeparam name="T">The type to deserialize</typeparam>
            <param name="source">The source.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.DotNetXmlSerializer.Deserialize(System.Type,System.IO.Stream)">
            <summary>
            Deserializes the specified type.
            </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="source">The source.</param>
            <returns>
            The deserialized object
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.Serialization.Providers.JsonNetSerializer">
            <summary>
            JsonNet serializer
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.JsonNetSerializer.Serialize(System.Type,System.Object,System.IO.Stream)">
            <summary>
            Serializes the specified value.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.JsonNetSerializer.Serialize``1(``0,System.IO.Stream)">
            <summary>
            Serializes the specified value.
            </summary>
            <typeparam name="T">The type of the vlaue</typeparam>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.JsonNetSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the specified source.
            </summary>
            <typeparam name="T">The type to deserialize</typeparam>
            <param name="source">The source.</param>
            <returns>The deserialized instance</returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.JsonNetSerializer.Deserialize(System.Type,System.IO.Stream)">
            <summary>
            Deserializes the specified type.
            </summary>
            <param name="type">The type to deserialize.</param>
            <param name="source">The source.</param>
            <returns>The deserialized instance</returns>
        </member>
        <member name="T:Cinchcast.Framework.Serialization.Providers.ProtobufSerializer">
            <summary>
            Protobuf serialization provider for fast binary serialization and deserialization
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.ProtobufSerializer.Serialize(System.Type,System.Object,System.IO.Stream)">
            <summary>
            Serializes the specified value.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.ProtobufSerializer.Serialize``1(``0,System.IO.Stream)">
            <summary>
            Serializes the specified value.
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.ProtobufSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the specified source.
            </summary>
            <typeparam name="T">The type to deserialize</typeparam>
            <param name="source">The source.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.ProtobufSerializer.Deserialize(System.Type,System.IO.Stream)">
            <summary>
            Deserializes the specified type.
            </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="source">The source.</param>
            <returns>
            The deserialized object
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.Providers.ProtobufSerializer.EnsureSerialization(System.Type)">
            <summary>
            Creates a protobuf-net mapping for type if it's not serializable yet.
            Ensures types of all public properties have mappings too.
            </summary>
            <param name="type">the type that will be used when de/serializing</param>
        </member>
        <member name="T:Cinchcast.Framework.Serialization.SerializationHelper">
            <summary>
            Provides helper method for serialization and deserialization
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializationHelper.SerializeAsString(System.Type,System.Object,Cinchcast.Framework.Serialization.SerializerType)">
            <summary>
            Serializes as string.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="serializerType">Name of the serializer.</param>
            <returns>
            The string representation of the value
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializationHelper.SerializeAsByteArray(System.Type,System.Object,Cinchcast.Framework.Serialization.SerializerType)">
            <summary>
            Serializes as byte array.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="serializerType">Name of the serializer.</param>
            <returns>
            The byte array representation of the value
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializationHelper.SerializeAsBase64String(System.Type,System.Object,Cinchcast.Framework.Serialization.SerializerType)">
            <summary>
            Serializes as base64 string.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="serializerType">Name of the serializer.</param>
            <returns>
            The base64 string representation of the value
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializationHelper.DeserializeFromString``1(System.String,Cinchcast.Framework.Serialization.SerializerType)">
            <summary>
            Deserializes from string.
            </summary>
            <typeparam name="T">The type to deserialize</typeparam>
            <param name="serialized">The serialized data.</param>
            <param name="serializerType">Name of the serializer.</param>
            <returns>
            The deserialized object
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializationHelper.DeserializeFromByteArray``1(System.Byte[],Cinchcast.Framework.Serialization.SerializerType)">
            <summary>
            Deserializes from byte array.
            </summary>
            <typeparam name="T">The type to deserialize</typeparam>
            <param name="serialized">The serialized data.</param>
            <param name="serializerType">Name of the serializer.</param>
            <returns>
            The deserialized object
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializationHelper.DeserializeFromBase64String``1(System.String,Cinchcast.Framework.Serialization.SerializerType)">
            <summary>
            Deserializes from base64 string.
            </summary>
            <typeparam name="T">The type to deserialize</typeparam>
            <param name="serialized">The serialized data.</param>
            <param name="serializerType">Name of the serializer.</param>
            <returns>
            The deserialized object
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializationHelper.DeserializeFromString(System.Type,System.String,Cinchcast.Framework.Serialization.SerializerType)">
            <summary>
            Deserializes from string.
            </summary>
            <param name="type">The type to deserialize.</param>
            <param name="serialized">The serialized data.</param>
            <param name="serializerType">Name of the serializer.</param>
            <returns>
            The deserialized object
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializationHelper.DeserializeFromByteArray(System.Type,System.Byte[],Cinchcast.Framework.Serialization.SerializerType)">
            <summary>
            Deserializes from byte array.
            </summary>
            <param name="type">The type to deserialize.</param>
            <param name="serialized">The serialized data.</param>
            <param name="serializerType">Name of the serializer.</param>
            <returns>
            The deserialized object
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializationHelper.DeserializeFromBase64String(System.Type,System.String,Cinchcast.Framework.Serialization.SerializerType)">
            <summary>
            Deserializes from a base64 string.
            </summary>
            <param name="type">The type to deserialize.</param>
            <param name="serialized">The serialized data.</param>
            <param name="serializerType">Name of the serializer.</param>
            <returns>
            The deserialized object
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.Serialization.SerializerFactory">
            <summary>
            The default serializer factory
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializerFactory.GetDefaultSerializer">
            <summary>
            Gets the default serializer.
            </summary>
            <returns>
            The default serializer
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializerFactory.GetSerializer(Cinchcast.Framework.Serialization.SerializerType)">
            <summary>
            Gets the serializer by its type.
            </summary>
            <param name="type">The type.</param>
            <returns>The serializer by its type</returns>
        </member>
        <member name="M:Cinchcast.Framework.Serialization.SerializerFactory.GetSerializers">
            <summary>
            Gets all serializers.
            </summary>
            <returns>
            All the configured serializers
            </returns>
        </member>
        <member name="P:Cinchcast.Framework.Serialization.SerializerFactory.Default">
            <summary>
            Gets the default instance
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.Serialization.SerializerType">
            <summary>
            The type of the serializer
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.Serialization.SerializerType.Json">
            <summary>
            Json serializer
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.Serialization.SerializerType.Binary">
            <summary>
            Binary serializer
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.Serialization.SerializerType.Xml">
            <summary>
            Xml serializer
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.Threading.Tasks.TaskHelper">
            <summary>
                Useful functionality for Tasks
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Threading.Tasks.TaskHelper.RunSynchronously(System.Action,System.Threading.CancellationToken)">
            <summary>
                Runs the task synchronously.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="token">The cancellation token.</param>
            <returns>The task</returns>
        </member>
        <member name="M:Cinchcast.Framework.Threading.Tasks.TaskHelper.RunSynchronously``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
                Runs the task synchronously.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The function to execute</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task</returns>
        </member>
        <member name="M:Cinchcast.Framework.Threading.Tasks.TaskHelper.RunSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Runs the task synchronously.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The function to execute.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task</returns>
        </member>
        <member name="T:Cinchcast.Framework.Transformation.XsltTransformer">
            <summary>
            Does transformations for XSLT.
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Transformation.XsltTransformer.TransformXmlStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Transforms an XML document using XSLT.
            </summary>
            <param name="xmlStream">The source XML stream.</param>
            <param name="xsltStream">The source XSLT stream.</param>
            <returns>The transformed XML document stream.</returns>
        </member>
        <member name="M:Cinchcast.Framework.Transformation.XsltTransformer.TransformXmlStream(System.IO.Stream,System.String)">
            <summary>
            Transforms an XML document using XSLT.
            </summary>
            <param name="xmlStream">The source XML stream.</param>
            <param name="xsltString">The source XSLT string.</param>
            <returns>The transformed XML document stream.</returns>
        </member>
        <member name="M:Cinchcast.Framework.Transformation.XsltTransformer.ApplyTransformation(System.IO.Stream,System.Xml.XmlReader)">
            <summary>
            Internal stream transform
            </summary>
            <param name="xmlStream">The source XML stream.</param>
            <param name="xsltStream">The source XSLT stream.</param>
            <returns>The transformed XML document stream.</returns>
        </member>
        <member name="T:Cinchcast.Framework.Validation.CompositeValidator">
            <summary>
            A validator that contains mulitple validator
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.Validation.IValidator">
            <summary>
            Defines the contract for a validation engine
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Validation.IValidator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Tries to validate an object.
            </summary>
            <param name="instance">The instance.</param>
            <param name="validationContext">The validation context.</param>
            <param name="validationResults">The validation results.</param>
            <returns><c>true</c> if the object is valid; otherwise <c>false</c></returns>
        </member>
        <member name="M:Cinchcast.Framework.Validation.CompositeValidator.#ctor(Cinchcast.Framework.Validation.IValidator[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.Validation.CompositeValidator"/> class.
            </summary>
            <param name="validators">The validators.</param>
        </member>
        <member name="M:Cinchcast.Framework.Validation.CompositeValidator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Tries to validate an object.
            </summary>
            <param name="instance">The instance.</param>
            <param name="validationContext">The validation context.</param>
            <param name="validationResults">The validation results.</param>
            <returns>
              <c>true</c> if the object is valid; otherwise <c>false</c>
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.Validation.DataAnnotationsValidator">
            <summary>
            The DataAnnotations validation engine
            </summary>
        </member>
        <member name="F:Cinchcast.Framework.Validation.DataAnnotationsValidator.Instance">
            <summary>
            The singleton instance
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Validation.DataAnnotationsValidator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Tries to validate an object.
            </summary>
            <param name="instance">The instance.</param>
            <param name="validationContext">The validation context.</param>
            <param name="validationResults">The validation results.</param>
            <returns>
              <c>true</c> if the object is valid; otherwise <c>false</c>
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.Validation.Validators">
            <summary>
            The configured validation engines
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.Validation.Validators.Register(System.Type,Cinchcast.Framework.Validation.IValidator)">
            <summary>
            Registers a validator for the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="validationEngine">The validation engine.</param>
        </member>
        <member name="M:Cinchcast.Framework.Validation.Validators.Get(System.Type)">
            <summary>
            Gets the configured validator for the type.
            </summary>
            <param name="type">The type.</param>
            <returns>The validator</returns>
        </member>
        <member name="M:Cinchcast.Framework.Validation.Validators.TryValidateObject(System.Object)">
            <summary>
            Tries the validate object.
            </summary>
            <param name="instance">The instance.</param>
            <returns><c>true</c> if the instance if valid; otherwise <c>false</c></returns>
        </member>
        <member name="M:Cinchcast.Framework.Validation.Validators.TryValidateObject(System.Object,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Tries the validate object.
            </summary>
            <param name="instance">The instance.</param>
            <param name="validationResults">The validation results.</param>
            <returns>
              <c>true</c> if the instance if valid; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.Validation.Validators.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Tries to validate the instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="validationContext">The validation context.</param>
            <param name="validationResults">The validation results.</param>
            <returns><c>true</c> if the instance if valid; otherwise <c>false</c></returns>
        </member>
    </members>
</doc>
